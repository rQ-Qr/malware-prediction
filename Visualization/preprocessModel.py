from sklearn.preprocessing import OneHotEncoder
import numpy as np, pandas as pd, os, gc, chardet

FREQUENCYENCODING_ROWS = ['EngineVersion', 'AppVersion', 'AvSigVersion', 'Census_OSVersion'] # LOAD AND ONE-HOT-ENCODE
ONEHOTENCODING_ROWS = ['RtpStateBitfield', 'IsSxsPassiveMode', 'DefaultBrowsersIdentifier', 'AVProductStatesIdentifier', 'AVProductsInstalled', 'AVProductsEnabled',
'CountryIdentifier', 'CityIdentifier',
'GeoNameIdentifier', 'LocaleEnglishNameIdentifier',
'Processor', 'OsBuild', 'OsSuite', 'SmartScreen', 'Census_MDC2FormFactor',
'Census_OEMNameIdentifier',
'Census_ProcessorCoreCount',
'Census_ProcessorModelIdentifier',
'Census_PrimaryDiskTotalCapacity', 'Census_PrimaryDiskTypeName',
'Census_HasOpticalDiskDrive',
'Census_TotalPhysicalRAM', 'Census_ChassisTypeName', 'Census_InternalPrimaryDiagonalDisplaySizeInInches',
'Census_InternalPrimaryDisplayResolutionHorizontal', 'Census_InternalPrimaryDisplayResolutionVertical',
'Census_PowerPlatformRoleName', 'Census_InternalBatteryType', 'Census_InternalBatteryNumberOfCharges',
'Census_OSEdition', 'Census_OSInstallLanguageIdentifier', 'Census_GenuineStateName', 'Census_ActivationChannel',
'Census_FirmwareManufacturerIdentifier',
'Census_IsTouchEnabled', 'Census_IsPenCapable',
'Census_IsAlwaysOnAlwaysConnectedCapable', 'Wdft_IsGamer',
'Wdft_RegionIdentifier']


# categorical data to different classes with the same distance
def oneHotEncode(df : pd.DataFrame, columnName: str):
    ohe = OneHotEncoder(handle_unknown='ignore', sparse_output = False).set_output(transform='pandas')
    oheTransform = ohe.fit_transform(df[[columnName]])
    df = pd.concat([df, oheTransform], axis=1).drop(columns = [columnName])
    return df

# frequency encoding such that each category has a different label based on frequnecy
def freqEncode(df, columnName):
    frequency_map = df[columnName].value_counts().to_dict()
    df[columnName] = df[columnName].map(frequency_map)
    return df



def processData(path):
    df = pd.read_csv(path, low_memory=False)
    for col in ONEHOTENCODING_ROWS:
        df = oneHotEncode(df, col)

    for col in FREQUENCYENCODING_ROWS:
        df = freqEncode(df, col)
    df.head()
    return df

def main():
    path = 'sample.csv'
    df = processData(path)
    df.to_csv('data.csv')
    
    

main()