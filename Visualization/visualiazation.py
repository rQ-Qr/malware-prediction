import matplotlib.pyplot as plt
import numpy as np, pandas as pd, os, gc
import seaborn as sns

HASDETECTIONCOLUMN = 'HasDetections'
'''
Columns
MachineIdentifier,ProductName,EngineVersion,AppVersion,AvSigVersion,IsBeta,RtpStateBitfield,IsSxsPassiveMode,DefaultBrowsersIdentifier,AVProductStatesIdentifier,AVProductsInstalled,
AVProductsEnabled,HasTpm,CountryIdentifier,CityIdentifier,OrganizationIdentifier,GeoNameIdentifier,LocaleEnglishNameIdentifier,Platform,Processor,OsVer,OsBuild,OsSuite,OsPlatformSubRelease,
OsBuildLab,SkuEdition,IsProtected,AutoSampleOptIn,PuaMode,SMode,IeVerIdentifier,SmartScreen,Firewall,UacLuaenable,Census_MDC2FormFactor,Census_DeviceFamily,Census_OEMNameIdentifier,
Census_OEMModelIdentifier,Census_ProcessorCoreCount,Census_ProcessorManufacturerIdentifier,Census_ProcessorModelIdentifier,Census_ProcessorClass,Census_PrimaryDiskTotalCapacity,
Census_PrimaryDiskTypeName,Census_SystemVolumeTotalCapacity,Census_HasOpticalDiskDrive,Census_TotalPhysicalRAM,Census_ChassisTypeName,Census_InternalPrimaryDiagonalDisplaySizeInInches,
Census_InternalPrimaryDisplayResolutionHorizontal,Census_InternalPrimaryDisplayResolutionVertical,Census_PowerPlatformRoleName,Census_InternalBatteryType,Census_InternalBatteryNumberOfCharges,
Census_OSVersion,Census_OSArchitecture,Census_OSBranch,Census_OSBuildNumber,Census_OSBuildRevision,Census_OSEdition,Census_OSSkuName,Census_OSInstallTypeName,Census_OSInstallLanguageIdentifier,
Census_OSUILocaleIdentifier,Census_OSWUAutoUpdateOptionsName,Census_IsPortableOperatingSystem,Census_GenuineStateName,Census_ActivationChannel,Census_IsFlightingInternal,Census_IsFlightsDisabled,
Census_FlightRing,Census_ThresholdOptIn,Census_FirmwareManufacturerIdentifier,Census_FirmwareVersionIdentifier,Census_IsSecureBootEnabled,Census_IsWIMBootEnabled,Census_IsVirtualDevice,Census_IsTouchEnabled,
Census_IsPenCapable,Census_IsAlwaysOnAlwaysConnectedCapable,Wdft_IsGamer,Wdft_RegionIdentifier,HasDetections
'''


CategoricalData = ['AppVersion', 'EngineVersion', 'AvSigVersion', 'IsBeta', 'RtpStateBitfield', 'IsSxsPassiveMode', 'DefaultBrowsersIdentifier',
                    'AVProductStatesIdentifier', 'HasTpm', 'CountryIdentifier', 'CityIdentifier', 'OrganizationIdentifier', 'GeoNameIdentifier', 'LocaleEnglishNameIdentifier',
                    'Platform', 'Processor', 'OsVer', 'OsBuild', 'OsSuite', 'OsPlatformSubRelease', 'OsBuildLab', 'SkuEdition', 'IsProtected', 'SMode',
                    'AutoSampleOptIn', 'IeVerIdentifier', 'SmartScreen', 'Firewall', 'UacLuaenable', 'Census_MDC2FormFactor', 'Census_DeviceFamily', 'Census_OEMNameIdentifier', 'Census_OEMModelIdentifier',
                    'Census_ProcessorManufacturerIdentifier',    
                    'Census_ProcessorClass', 'Census_PrimaryDiskTypeName', 'Census_HasOpticalDiskDrive', 'Census_ChassisTypeName', 
                    'Census_PowerPlatformRoleName', 'Census_InternalBatteryType', 'Census_OSArchitecture', 'Census_OSBranch', 'Census_OSBuildNumber', 'Census_OSBuildRevision',
                    'Census_OSEdition', 'Census_OSSkuName', 'Census_OSInstallTypeName', 'Census_OSInstallLanguageIdentifier', 'Census_OSUILocaleIdentifier', 'Census_OSWUAutoUpdateOptionsName',
                    'Census_IsPortableOperatingSystem', 'Census_GenuineStateName', 'Census_ActivationChannel', 'Census_IsFlightingInternal', 'Census_IsFlightsDisabled',
                    'Census_FlightRing', 'Census_ThresholdOptIn', 'Census_FirmwareManufacturerIdentifier', 'Census_FirmwareVersionIdentifier', 'Census_IsSecureBootEnabled',
                    'Census_IsWIMBootEnabled',  'Census_IsVirtualDevice', 'Census_IsTouchEnabled', 'Census_IsPenCapable', 'Census_IsAlwaysOnAlwaysConnectedCapable',
                    'Wdft_IsGamer', 'Wdft_RegionIdentifier'
                   ]
NumericalData = [  'AVProductsInstalled', 'AVProductsEnabled', 'Census_ProcessorCoreCount', 'Census_PrimaryDiskTotalCapacity',
                  'Census_SystemVolumeTotalCapacity', 'Census_TotalPhysicalRAM', 'Census_InternalPrimaryDiagonalDisplaySizeInInches',
                 'Census_InternalPrimaryDisplayResolutionHorizontal', 'Census_InternalPrimaryDisplayResolutionVertical', 
                 ]


def splitDataFrame(df):
    clean = df[df[HASDETECTIONCOLUMN] == 0]
    detected = df[df[HASDETECTIONCOLUMN] == 1]
    return clean, detected

def main():
    df = pd.read_csv('sample.csv', low_memory=False)
    dfClean, dfDetected = splitDataFrame(df)
    print(f"Number of rows for clean devices: {len(dfClean)}")
    print(f"Number of rows for infected devices: {len(dfDetected)}")
    for column in CategoricalData:
        try:
            plt.figure(figsize=(10, 6))
            sns.countplot(y=column, data=dfClean, order = dfClean[column].value_counts().index, alpha=0.4,
                           )
            sns.countplot(y=column, data=dfDetected, order = dfDetected[column].value_counts().index, alpha=0.4)
            plt.title(f'Distribution of {column}')
            plt.tight_layout()
            
            plt.savefig(f'Graphs/{column}_distribution.png')
            plt.close()
        except Exception as e:
            print(f"Failed to visualize column: {column}. Error: {e}")


    for column in NumericalData:
        try:
            plt.figure(figsize=(10, 6))

            sns.histplot(dfClean[column]/dfClean[column].max(), bins=20, kde=True, alpha=0.4,
                        )
            sns.histplot(dfDetected[column]/dfDetected[column].max(), bins=20, kde=True, alpha=0.4,
                        )
            plt.title(f'Distribution of {column} (Normalized)')
            plt.tight_layout()

            plt.savefig(f'Graphs/{column}_normalized_distribution.png')
            plt.close()
        except Exception as e:
            print(f"Failed to visualize column: {column}. Error: {e}")
        
        

main()
