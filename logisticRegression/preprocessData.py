from sklearn.preprocessing import OneHotEncoder
import numpy as np, pandas as pd, os, gc, chardet

FREQUENCYENCODING_ROWS = ['EngineVersion', 'AppVersion', 'AvSigVersion', 'Census_OSVersion', 'Census_TotalPhysicalRAM']

ONEHOTENCODING_ROWS = ['RtpStateBitfield', 'IsSxsPassiveMode', 'DefaultBrowsersIdentifier', 'AVProductStatesIdentifier', 'AVProductsInstalled', 'AVProductsEnabled',
'CountryIdentifier', 'CityIdentifier',
'GeoNameIdentifier', 'LocaleEnglishNameIdentifier',
'Processor', 'OsBuild', 'OsSuite', 'SmartScreen', 'Census_MDC2FormFactor',
'Census_OEMNameIdentifier',
'Census_ProcessorCoreCount',
'Census_ProcessorModelIdentifier',
'Census_PrimaryDiskTotalCapacity', 'Census_PrimaryDiskTypeName',
'Census_HasOpticalDiskDrive', 'Census_ChassisTypeName', 'Census_InternalPrimaryDiagonalDisplaySizeInInches',
'Census_InternalPrimaryDisplayResolutionHorizontal', 'Census_InternalPrimaryDisplayResolutionVertical',
'Census_PowerPlatformRoleName', 'Census_InternalBatteryType', 'Census_InternalBatteryNumberOfCharges',
'Census_OSEdition', 'Census_OSInstallLanguageIdentifier', 'Census_GenuineStateName', 'Census_ActivationChannel',
'Census_FirmwareManufacturerIdentifier',
'Census_IsTouchEnabled', 'Census_IsPenCapable',
'Census_IsAlwaysOnAlwaysConnectedCapable', 'Wdft_IsGamer',
'Wdft_RegionIdentifier']

target = ['HasDetections']

def oneHotEncode(df, columnName):
    df[columnName] = df[columnName].astype(str)

    ohe = OneHotEncoder(handle_unknown='ignore')
    oheTransform = ohe.fit_transform(df[[columnName]]).toarray()
    columns = [f"{columnName}_{cat}" for cat in ohe.categories_[0]]
    ohe_df = pd.DataFrame(oheTransform, columns=columns, index=df.index)
    return ohe_df


# frequency encoding such that each category has a different label based on frequnecy
def freqEncode(df, columnName):
    frequency_map = df[columnName].value_counts().to_dict()
    freq_encoded_column = df[columnName].map(frequency_map)
    return freq_encoded_column



def processData(path):
    df = pd.read_csv(path, low_memory=False)

    
    df.fillna(0, inplace=True)  
    df.fillna('', inplace=True)  
    
    processed_df = pd.DataFrame(index=df.index)

    
    for col in ONEHOTENCODING_ROWS:
        processed_df = pd.concat([processed_df, oneHotEncode(df, col)], axis=1)

    
    for col in FREQUENCYENCODING_ROWS:
        freq_encoded_col = freqEncode(df, col)
        processed_df = pd.concat([processed_df, freq_encoded_col], axis=1)

    processed_df['HasDetections'] = pd.DataFrame(df['HasDetections'])
    return processed_df

def main():
    path = 'sample.csv'
    
    df = processData(path)
    df.to_csv('data.csv')
    
    

main()