from sklearn.preprocessing import OneHotEncoder
import numpy as np, pandas as pd, os, gc, chardet


NUMERICAL_ROW = ['Census_TotalPhysicalRAM', 'Census_InternalPrimaryDiagonalDisplaySizeInInches', 'Census_InternalBatteryNumberOfCharges', 'Census_InternalPrimaryDisplayResolutionHorizontal',  'Census_PrimaryDiskTotalCapacity',
                 'AVProductsInstalled', 'Census_InternalPrimaryDisplayResolutionVertical']

BOOLEAN_ROW = ['Wdft_IsGamer', 'Census_IsAlwaysOnAlwaysConnectedCapable', 'Census_ProcessorCoreCount', 'Census_IsTouchEnabled', 'Census_IsPenCapable', 'AVProductsEnabled', 'SmartScreen', 'Census_HasOpticalDiskDrive',
               'IsSxsPassiveMode']

LABEL_ENCODING = ['CountryIdentifier', 'CityIdentifier', 'Wdft_RegionIdentifier', 'Census_OSInstallLanguageIdentifier', 'Census_OSEdition']

FREQUENCYENCODING_ROWS = ['EngineVersion', 'AppVersion', 'AvSigVersion', 'Census_OSVersion', 'Processor', 'Census_OEMNameIdentifier', 'Census_FirmwareManufacturerIdentifier', 'DefaultBrowsersIdentifier', 'LocaleEnglishNameIdentifier', 'GeoNameIdentifier']

ONEHOTENCODING_ROWS = ['RtpStateBitfield',
'OsBuild', 'OsSuite', 'Census_MDC2FormFactor',
'Census_ProcessorModelIdentifier', 'Census_PrimaryDiskTypeName', 'Census_ChassisTypeName',
'Census_PowerPlatformRoleName', 'Census_InternalBatteryType', 'Census_GenuineStateName', 'Census_ActivationChannel', ]

UIDs = ['AVProductStatesIdentifier']

target = ['HasDetections']

def oneHotEncode(df, columnName):
    df[columnName] = df[columnName].astype(str)
    
    ohe = OneHotEncoder(handle_unknown='ignore')
    oheTransform = ohe.fit_transform(df[[columnName]]).toarray()
    columns = [f"{columnName}_{cat}" for cat in ohe.categories_[0]]
    ohe_df = pd.DataFrame(oheTransform, columns=columns, index=df.index)
    return ohe_df


# frequency encoding such that each category has a different label based on frequnecy
def freqEncode(df, columnName):
    frequency_map = df[columnName].value_counts().to_dict()
    freq_encoded_column = df[columnName].map(frequency_map)
    return freq_encoded_column


import pandas as pd

def processData(path, chunksize=10000, output='data.csv'):
    df = pd.read_csv(path, chunksize=chunksize, low_memory=False)


    open(output, 'w').close()

    count = 0
    for chunk in df:
        chunk.fillna(0, inplace=True)
        chunk.fillna('unkown', inplace=True)
        processed_chunk = pd.DataFrame(index=chunk.index)

        for col in ONEHOTENCODING_ROWS:
            processed_chunk = pd.concat([processed_chunk, oneHotEncode(chunk, col)], axis=1)

        for col in FREQUENCYENCODING_ROWS:
            freq_encoded_col = freqEncode(chunk, col)
            processed_chunk = pd.concat([processed_chunk, freq_encoded_col], axis=1)
        
        processed_chunk['HasDetections'] = pd.DataFrame(chunk['HasDetections'])

        if count == 0:
            processed_chunk.to_csv(output, mode='a', header=True, index=False)
        else:
            processed_chunk.to_csv(output, mode='a', header=False, index=False)

        count += 1
        print("Chunks processed: ", count)

def main():
    path = 'sample.csv'
    outputPath = 'data.csv'
    chunksize = 20000

    processData(path, chunksize, outputPath)


main()
