import re
import pandas as pd
import numpy as np
import lightgbm as lgb
from scipy.sparse import vstack, csr_matrix, save_npz, load_npz
from sklearn.preprocessing import LabelEncoder, OneHotEncoder
from sklearn.model_selection import StratifiedKFold
from sklearn.metrics import accuracy_score
import preprocessData as pre
import gc  # garbage collector


gc.enable()


def light_gbm():
    path = 'sampleData.csv'
    categories = pre.precalculate_unique_values(path)
    #pre.processData(path, categories=categories, chunksize=999999, output='processedData.csv')
    #pre.processData('testData.csv', chunksize=999999, output='testProcessedData.csv')
    
    trainingData = pd.read_csv('processedData.csv', dtype=pre.types)
    testData = trainingData
    
    trainingData = trainingData.rename(columns = lambda x:re.sub('[^A-Za-z0-9_]+', '', x))
    testData = testData.rename(columns = lambda x:re.sub('[^A-Za-z0-9_]+', '', x))

    print('Running lightGBM model')
    # Assume the HasDetections variable is in the 'HasDetections' column
    X_train = trainingData.drop('HasDetections', axis=1)
    y_train = trainingData['HasDetections']
    X_test = testData.drop('HasDetections', axis=1)
    y_test = testData['HasDetections']

    # Create LightGBM dataset
    train_data = lgb.Dataset(X_train, label=y_train)

    # Define parameters
    params = {
        'boosting_type': 'gbdt',
        'objective': 'binary',  # or 'multiclass' for multi-class classification
        'metric': 'binary_logloss',  # or 'multi_logloss' for multi-class classification
        'learning_rate': 0.05,
        # Add more parameters here
    }

    # Train the model
    gbm = lgb.train(params, train_data, num_boost_round=100)  # Adjust num_boost_round as needed

    # Make predictions
    y_pred = gbm.predict(X_test, num_iteration=gbm.best_iteration)

    # Convert probabilities to binary output (if it's binary classification)
    y_pred_binary = np.where(y_pred > 0.5, 1, 0)

    # Evaluate the model
    accuracy = accuracy_score(y_test, y_pred_binary)
    print(f"Accuracy: {accuracy}")


if __name__ == '__main__':
    light_gbm()