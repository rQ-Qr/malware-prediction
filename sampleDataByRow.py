import pandas as pd
import sys



types = {
    'MachineIdentifier': 'category',
    'ProductName': 'category',
    'EngineVersion': 'category',
    'AppVersion': 'category',
    'AvSigVersion': 'category',
    'IsBeta': 'Int8',
    'RtpStateBitfield': 'category',
    'IsSxsPassiveMode': 'Int8',
    'DefaultBrowsersIdentifier': 'category',
    'AVProductStatesIdentifier': 'category',
    'AVProductsInstalled': 'float32',
    'AVProductsEnabled': 'Int8',
    'HasTpm': 'Int8',
    'CountryIdentifier': 'float32',
    'CityIdentifier': 'float32',
    'OrganizationIdentifier': 'float32',
    'GeoNameIdentifier': 'float32',
    'LocaleEnglishNameIdentifier': 'float32',
    'Platform': 'category',
    'Processor': 'category',
    'OsVer': 'category',
    'OsBuild': 'category',
    'OsSuite': 'category',
    'OsPlatformSubRelease': 'category',
    'OsBuildLab': 'category',
    'SkuEdition': 'category',
    'IsProtected': 'Int8',
    'AutoSampleOptIn': 'category',
    'PuaMode': 'category',
    'SMode': 'category',
    'IeVerIdentifier': 'category',
    'SmartScreen': 'category',
    'Firewall': 'Int8',
    'UacLuaenable': 'Int8',
    'Census_MDC2FormFactor': 'category',
    'Census_DeviceFamily': 'category',
    'Census_OEMNameIdentifier': 'category',
    'Census_OEMModelIdentifier': 'category',
    'Census_ProcessorCoreCount': 'float32',
    'Census_ProcessorManufacturerIdentifier': 'category',
    'Census_ProcessorModelIdentifier': 'category',
    'Census_ProcessorClass': 'category',
    'Census_PrimaryDiskTotalCapacity': 'float32',
    'Census_PrimaryDiskTypeName': 'category',
    'Census_SystemVolumeTotalCapacity': 'float32',
    'Census_HasOpticalDiskDrive': 'Int8',
    'Census_TotalPhysicalRAM': 'float32',
    'Census_ChassisTypeName': 'category',
    'Census_InternalPrimaryDiagonalDisplaySizeInInches': 'float32',
    'Census_InternalPrimaryDisplayResolutionHorizontal': 'float32',
    'Census_InternalPrimaryDisplayResolutionVertical': 'float32',
    'Census_PowerPlatformRoleName': 'category',
    'Census_InternalBatteryType': 'category',
    'Census_InternalBatteryNumberOfCharges': 'float32',
    'Census_OSVersion': 'category',
    'Census_OSArchitecture': 'category',
    'Census_OSBranch': 'category',
    'Census_OSBuildNumber': 'Int16',
    'Census_OSBuildRevision': 'category',
    'Census_OSEdition': 'category',
    'Census_OSSkuName': 'category',
    'Census_OSInstallTypeName': 'category',
    'Census_OSInstallLanguageIdentifier': 'Int16',
    'Census_OSUILocaleIdentifier': 'Int16',
    'Census_OSWUAutoUpdateOptionsName': 'category',
    'Census_IsPortableOperatingSystem': 'Int8',
    'Census_GenuineStateName': 'category',
    'Census_ActivationChannel': 'category',
    'Census_IsFlightingInternal': 'Int8',
    'Census_IsFlightsDisabled': 'Int8',
    'Census_FlightRing': 'category',
    'Census_ThresholdOptIn': 'Int8',
    'Census_FirmwareManufacturerIdentifier': 'category',
    'Census_FirmwareVersionIdentifier': 'category',
    'Census_IsSecureBootEnabled': 'Int8',
    'Census_IsWIMBootEnabled': 'Int8',
    'Census_IsVirtualDevice': 'Int8',
    'Census_IsTouchEnabled': 'Int8',
    'Census_IsPenCapable': 'Int8',
    'Census_IsAlwaysOnAlwaysConnectedCapable': 'Int8',
    'Wdft_IsGamer': 'Int8',
    'Wdft_RegionIdentifier': 'Int16',
    'HasDetections': 'Int8'
}

def sampleALL(inputFilename, outputfilename):
    Sample_data(inputFilename, None, outputfilename)

def Sample_data(path, num_rows, output_filename):
    total_rows = sum(1 for row in open(path, 'r'))

    if num_rows is None:
        skip_interval = 1
    else:
        skip_interval = round(total_rows / num_rows)

    df = pd.read_csv(path, header=0, skiprows=lambda i: i % skip_interval != 0 and i != 0,
                     dtype=types)

    column_label = df.columns[27]
    print("Dropping column 28 with label: ", column_label)

    df = df.drop(column_label, axis=1)

    df.to_csv(output_filename, index=False)




def main(num_rows = 1000, path = 'Source/train.csv', outputFilename = 'sample.csv'):
    Sample_data(path, int(num_rows), outputFilename)

if __name__ == "__main__":
    # numrows, inputfilename, outputfile name
    argsNo = len(sys.argv)
    if argsNo == 1:
        main()
    elif argsNo == 2:
        main(num_rows=sys.argv[1])
    elif argsNo == 3:
        main(num_rows=sys.argv[1], path=sys.argv[2])
    elif argsNo == 4:
        main(num_rows=sys.argv[1], path=sys.argv[2], outputFilename=sys.argv[3])
